# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server.models.file import File
from server import util

from server.models.file import File  # noqa: E501


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, reference=None, files_count=None, checked_count=None, errors_count=None,
                 match_count=None, files=None):  # noqa: E501
        """Report - a model defined in OpenAPI

        :param id: The id of this Report.  # noqa: E501
        :type id: int
        :param reference: The reference of this Report.  # noqa: E501
        :type reference: str
        :param files_count: The files_count of this Report.  # noqa: E501
        :type files_count: int
        :param checked_count: The checked_count of this Report.  # noqa: E501
        :type checked_count: int
        :param errors_count: The errors_count of this Report.  # noqa: E501
        :type errors_count: int
        :param match_count: The match_count of this Report.  # noqa: E501
        :type match_count: int
        :param files: The files of this Report.  # noqa: E501
        :type files: List[File]
        """
        self.openapi_types = {
            'id': int,
            'reference': str,
            'files_count': int,
            'checked_count': int,
            'errors_count': int,
            'match_count': int,
            'files': List[File]
        }

        self.attribute_map = {
            'id': 'id',
            'reference': 'reference',
            'files_count': 'filesCount',
            'checked_count': 'checkedCount',
            'errors_count': 'errorsCount',
            'match_count': 'matchCount',
            'files': 'files'
        }

        self._id = id
        self._reference = reference
        self._files_count = files_count
        self._checked_count = checked_count
        self._errors_count = errors_count
        self._match_count = match_count
        self._files = files

    @classmethod
    def from_dict(cls, dikt) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Report of this Report.  # noqa: E501
        :rtype: Report
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Report.

        ID отчета.  # noqa: E501

        :return: The id of this Report.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        ID отчета.  # noqa: E501

        :param id: The id of this Report.
        :type id: int
        """

        self._id = id

    @property
    def reference(self):
        """Gets the reference of this Report.

        Ссылка на отчет.  # noqa: E501

        :return: The reference of this Report.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Report.

        Ссылка на отчет.  # noqa: E501

        :param reference: The reference of this Report.
        :type reference: str
        """

        self._reference = reference

    @property
    def files_count(self):
        """Gets the files_count of this Report.

        Количество файлов в отчете.  # noqa: E501

        :return: The files_count of this Report.
        :rtype: int
        """
        return self._files_count

    @files_count.setter
    def files_count(self, files_count):
        """Sets the files_count of this Report.

        Количество файлов в отчете.  # noqa: E501

        :param files_count: The files_count of this Report.
        :type files_count: int
        """

        self._files_count = files_count

    @property
    def checked_count(self):
        """Gets the checked_count of this Report.

        Количество проверенных файлов в отчете.  # noqa: E501

        :return: The checked_count of this Report.
        :rtype: int
        """
        return self._checked_count

    @checked_count.setter
    def checked_count(self, checked_count):
        """Sets the checked_count of this Report.

        Количество проверенных файлов в отчете.  # noqa: E501

        :param checked_count: The checked_count of this Report.
        :type checked_count: int
        """

        self._checked_count = checked_count

    @property
    def errors_count(self):
        """Gets the errors_count of this Report.

        Количество ошибок в отчете.  # noqa: E501

        :return: The errors_count of this Report.
        :rtype: int
        """
        return self._errors_count

    @errors_count.setter
    def errors_count(self, errors_count):
        """Sets the errors_count of this Report.

        Количество ошибок в отчете.  # noqa: E501

        :param errors_count: The errors_count of this Report.
        :type errors_count: int
        """

        self._errors_count = errors_count

    @property
    def match_count(self):
        """Gets the match_count of this Report.

        Количество совпадений в отчете.  # noqa: E501

        :return: The match_count of this Report.
        :rtype: int
        """
        return self._match_count

    @match_count.setter
    def match_count(self, match_count):
        """Sets the match_count of this Report.

        Количество совпадений в отчете.  # noqa: E501

        :param match_count: The match_count of this Report.
        :type match_count: int
        """

        self._match_count = match_count

    @property
    def files(self):
        """Gets the files of this Report.

        :return: The files of this Report.
        :rtype: List[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Report.

        :param files: The files of this Report.
        :type files: List[File]
        """

        self._files = files
